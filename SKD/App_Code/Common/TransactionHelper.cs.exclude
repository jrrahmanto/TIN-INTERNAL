using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

/// <summary>
/// Summary description for TransactionHelper
/// </summary>
public class TransactionHelper
{
    public TransactionHelper()
    {
        //
        // TODO: Add constructor logic here
        //

    }

    // <summary>
    // Sets the connection on the specified table adapter.
    // </summary>
    private static void SetConnection(Object tableAdapter, SqlConnection connection) 
    {
        Type type = tableAdapter.GetType();
        PropertyInfo connectionProperty = type.GetProperty("Connection");
        connectionProperty.SetValue(tableAdapter, connection, null); 
    }

    // <summary>
    // Enlists the table adapter in a transaction.
    // </summary>
    private static void SetTransaction(Object tableAdapter, SqlTransaction transaction)
    {
        // get the table adapter's type
        Type type = tableAdapter.GetType();

        // set the transaction on each command in the adapter
        PropertyInfo commandsProperty = type.GetProperty("CommandCollection", BindingFlags.NonPublic | BindingFlags.Instance);
        //SqlCommand commands[] = CType(commandsProperty.GetValue(tableAdapter, Nothing), SqlCommand())
        //commandsProperty.GetValue(
        //For Each command As SqlCommand In commands
        //    command.Transaction = transaction
        //Next

        // set the connection on the table adapter
        SetConnection(tableAdapter, transaction.Connection);
    }

}
